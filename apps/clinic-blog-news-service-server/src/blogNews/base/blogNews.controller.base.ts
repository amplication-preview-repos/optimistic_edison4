/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogNewsService } from "../blogNews.service";
import { BlogNewsCreateInput } from "./BlogNewsCreateInput";
import { BlogNews } from "./BlogNews";
import { BlogNewsFindManyArgs } from "./BlogNewsFindManyArgs";
import { BlogNewsWhereUniqueInput } from "./BlogNewsWhereUniqueInput";
import { BlogNewsUpdateInput } from "./BlogNewsUpdateInput";

export class BlogNewsControllerBase {
  constructor(protected readonly service: BlogNewsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogNews })
  async createBlogNews(
    @common.Body() data: BlogNewsCreateInput
  ): Promise<BlogNews> {
    return await this.service.createBlogNews({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        image: true,
        title: true,
        link: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogNews] })
  @ApiNestedQuery(BlogNewsFindManyArgs)
  async blogNewsItems(@common.Req() request: Request): Promise<BlogNews[]> {
    const args = plainToClass(BlogNewsFindManyArgs, request.query);
    return this.service.blogNewsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        image: true,
        title: true,
        link: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogNews(
    @common.Param() params: BlogNewsWhereUniqueInput
  ): Promise<BlogNews | null> {
    const result = await this.service.blogNews({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        image: true,
        title: true,
        link: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogNews(
    @common.Param() params: BlogNewsWhereUniqueInput,
    @common.Body() data: BlogNewsUpdateInput
  ): Promise<BlogNews | null> {
    try {
      return await this.service.updateBlogNews({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          image: true,
          title: true,
          link: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogNews })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogNews(
    @common.Param() params: BlogNewsWhereUniqueInput
  ): Promise<BlogNews | null> {
    try {
      return await this.service.deleteBlogNews({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          image: true,
          title: true,
          link: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
