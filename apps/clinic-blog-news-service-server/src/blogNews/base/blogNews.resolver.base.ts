/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlogNews } from "./BlogNews";
import { BlogNewsCountArgs } from "./BlogNewsCountArgs";
import { BlogNewsFindManyArgs } from "./BlogNewsFindManyArgs";
import { BlogNewsFindUniqueArgs } from "./BlogNewsFindUniqueArgs";
import { CreateBlogNewsArgs } from "./CreateBlogNewsArgs";
import { UpdateBlogNewsArgs } from "./UpdateBlogNewsArgs";
import { DeleteBlogNewsArgs } from "./DeleteBlogNewsArgs";
import { BlogNewsService } from "../blogNews.service";
@graphql.Resolver(() => BlogNews)
export class BlogNewsResolverBase {
  constructor(protected readonly service: BlogNewsService) {}

  async _blogNewsItemsMeta(
    @graphql.Args() args: BlogNewsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlogNews])
  async blogNewsItems(
    @graphql.Args() args: BlogNewsFindManyArgs
  ): Promise<BlogNews[]> {
    return this.service.blogNewsItems(args);
  }

  @graphql.Query(() => BlogNews, { nullable: true })
  async blogNews(
    @graphql.Args() args: BlogNewsFindUniqueArgs
  ): Promise<BlogNews | null> {
    const result = await this.service.blogNews(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlogNews)
  async createBlogNews(
    @graphql.Args() args: CreateBlogNewsArgs
  ): Promise<BlogNews> {
    return await this.service.createBlogNews({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlogNews)
  async updateBlogNews(
    @graphql.Args() args: UpdateBlogNewsArgs
  ): Promise<BlogNews | null> {
    try {
      return await this.service.updateBlogNews({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlogNews)
  async deleteBlogNews(
    @graphql.Args() args: DeleteBlogNewsArgs
  ): Promise<BlogNews | null> {
    try {
      return await this.service.deleteBlogNews(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
