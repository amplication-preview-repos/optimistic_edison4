/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlogNews as PrismaBlogNews } from "@prisma/client";

export class BlogNewsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BlogNewsCountArgs, "select">): Promise<number> {
    return this.prisma.blogNews.count(args);
  }

  async blogNewsItems(
    args: Prisma.BlogNewsFindManyArgs
  ): Promise<PrismaBlogNews[]> {
    return this.prisma.blogNews.findMany(args);
  }
  async blogNews(
    args: Prisma.BlogNewsFindUniqueArgs
  ): Promise<PrismaBlogNews | null> {
    return this.prisma.blogNews.findUnique(args);
  }
  async createBlogNews(
    args: Prisma.BlogNewsCreateArgs
  ): Promise<PrismaBlogNews> {
    return this.prisma.blogNews.create(args);
  }
  async updateBlogNews(
    args: Prisma.BlogNewsUpdateArgs
  ): Promise<PrismaBlogNews> {
    return this.prisma.blogNews.update(args);
  }
  async deleteBlogNews(
    args: Prisma.BlogNewsDeleteArgs
  ): Promise<PrismaBlogNews> {
    return this.prisma.blogNews.delete(args);
  }
}
